import { useCallback, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { useStudyEngine } from '@/study/useStudyEngine';
import { studyEngine } from '@/study/study-engine';
import { ContentLoader } from '@/content/loader';
import type { Debut } from '@/content/types';
import ChessBoard from '@/components/ChessBoard';
import type { ChessBoardApi } from '@/board/chessground';

import './StudyView.css';

export default function StudyView() {
  const { id } = useParams<{ id: string }>();
  const [debut, setDebut] = useState<Debut | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (id) {
      ContentLoader.getInstance()
        .loadDebut(id)
        .then(setDebut)
        .catch(console.error)
        .finally(() => setLoading(false));
    }
  }, [id]);

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (!debut) {
    return <div>–î–µ–±—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return <StudyContent debut={debut} />;
}

function StudyContent({ debut }: { debut: Debut }) {
  const { 
    studentIndex,           // –ù–û–í–´–ô: –∏—Å–ø–æ–ª—å–∑—É–µ–º studentIndex
    currentFen, 
    learningMode, 
    currentComment, 
    // allowedMoves,      // ‚Üê –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // expectedUci,       // ‚Üê —Å—Ç—Ä–µ–ª–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ boardApi
    onMove,                 // –ù–û–í–´–ô: –¥–æ–±–∞–≤–ª—è–µ–º onMove
    setBoardApi,            // –ù–û–í–´–ô: –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ API –¥–æ—Å–∫–∏
    updateArrowAndDests,    // –ù–û–í–´–ô: –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    uiMsg,                  // –ù–û–í–´–ô: –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    resetCurrentDebut       // –ù–û–í–´–ô: –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–±—é—Ç–∞
  } = useStudyEngine(debut);

  const handleMove = useCallback((uci: string): boolean => {
    console.log('StudyView: handleMove called with uci:', uci);
    // –í—ã–∑—ã–≤–∞–µ–º onMove –∏–∑ useStudyEngine
    return onMove(uci);
  }, [onMove]);

  const onResetClick = () => {
    if (window.confirm(`–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–µ–±—é—Ç—É ¬´${debut.name}¬ª? –≠—Ç–æ –ù–ï –∑–∞—Ç—Ä–æ–Ω–µ—Ç –¥—Ä—É–≥–∏–µ –¥–µ–±—é—Ç—ã.`)) {
      resetCurrentDebut();
    }
  };

  // –ù–û–í–´–ô: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ API –¥–æ—Å–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const handleBoardMounted = useCallback((api: ChessBoardApi) => {
    console.log('StudyView: Board API mounted');
    setBoardApi(api);
  }, [setBoardApi]);



  return (
    <div className="study-view">
      <div className="study-header">
        <h1>{debut.name}</h1>
        <div className="study-header-actions">
          <span className={`learning-mode-badge ${learningMode}`}>
            {learningMode === 'withHints' ? '–° –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏' : '–ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫'}
          </span>
          <button
            className="reset-btn"
            onClick={onResetClick}
            title="–°–±—Ä–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–≥–æ –¥–µ–±—é—Ç–∞"
          >
            –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
          </button>
        </div>
      </div>
      
      <div className="study-content">
        <div className="chessboard-container">
          <ChessBoard
            key={debut.id}          // ‚Üê —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –Ω–æ–≤—ã–π React-–∏–Ω—Å—Ç–∞–Ω—Å –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            startFen={currentFen}
            orientation={debut.side}  // –ù–û–í–´–ô: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–µ–±—é—Ç–∞
            onTryMove={handleMove}
            onBoardMounted={handleBoardMounted}  // –ù–û–í–´–ô: callback –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
          />
        </div>
        
        <div className="study-info">
          <div className="step-info">
            <h3>–®–∞–≥ {Math.floor(studentIndex / 2) + 1}</h3>  {/* –ù–û–í–´–ô: –∏—Å–ø–æ–ª—å–∑—É–µ–º studentIndex */}
            <p>–•–æ–¥: {studentIndex % 2 === 0 ? '–ë–µ–ª—ã–µ' : '–ß–µ—Ä–Ω—ã–µ'}</p>
          </div>
          
          {uiMsg && (
            <div className={`hint-msg ${uiMsg.kind === "success" ? "hint-success" : "hint-info"}`}>
              {uiMsg.text}
            </div>
          )}
          {currentComment && (
            <div className="step-comment">
              <div className="comment-header">
                <span className="comment-icon">üí°</span>
                <span className="comment-title">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
              </div>
              <div className="comment-text">{currentComment}</div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
