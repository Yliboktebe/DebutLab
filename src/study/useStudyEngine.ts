import { useState, useEffect, useCallback, useRef } from 'react';
import { Debut } from '@/content/types';
import { studyEngine, StudyState, ApplyResult } from './study-engine';
import { progressManager, ProgressManager } from './progress-manager';
import type { ChessBoardApi } from '@/board/chessground';

type UiMsg = { text: string; kind: "success" | "info"; until: number } | null;

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: studyEngine –∏ progressManager - —ç—Ç–æ singleton —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
// studyEngine —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫: export const studyEngine = new StudyEngine();
// progressManager —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫: export const progressManager = ProgressManager.getInstance();

export function useStudyEngine(debut: Debut) {
  const [state, setState] = useState<StudyState>(studyEngine.getState());
  const boardApiRef = useRef<ChessBoardApi | null>(null);
  const didInitialSyncRef = useRef(false);
  const [uiMsg, setUiMsg] = useState<UiMsg>(null);

  // ‚¨áÔ∏è –û–ë–™–Ø–í–õ–ï–ù–ò–ï –í–í–ï–†–•–£ (HOISTED)
  function updateArrowAndDests() {
    if (!boardApiRef.current) return;

    const u = studyEngine.currentExpectedUci();
    const showArrow = studyEngine.getState().mode === "GUIDED" && u && !studyEngine.isMoveLearned(u);

    const dests = u
      ? new Map([[u.slice(0,2), [u.slice(2,4)]]])
      : new Map<string, string[]>();

    boardApiRef.current.setAllowedMoves(dests);
    boardApiRef.current.showArrow(showArrow ? u : null);
    
    console.log('useStudyEngine: Updated arrow and dests:', {
      expectedUci: u,
      shouldShowArrow: showArrow,
      dests: Array.from(dests.entries()),
      mode: studyEngine.getState().mode
    });
  }

  const showUiMsg = (m?: { kind: "success" | "info"; text: string; ttlMs?: number }) => {
    if (!m) return;
    const ttl = m.ttlMs ?? 1000;
    setUiMsg({ text: m.text, kind: m.kind, until: Date.now() + ttl });
    // –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    setTimeout(() => setUiMsg((cur) => (cur && Date.now() >= cur.until ? null : cur)), ttl + 50);
  };

  const resetCurrentDebut = useCallback(() => {
    // 1) —á–∏—Å—Ç–∏–º persistent
    const pm = ProgressManager.getInstance();
    pm.resetDebut(debut.id);

    // 2) –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–≤–∏–∂–∫–µ (–∏–Ω–∞—á–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å—Ç–∞—Ä—ã–µ learnedMoves)
    studyEngine.reloadProgressForCurrentDebut();

    // 3) –∂—ë—Å—Ç–∫–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –≤–µ—Ç–∫—É (GUIDED)
    studyEngine.hardResetCurrentDebutToFirstBranch();

    // 4) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const fen = studyEngine.getCurrentFen();
    const expectedUci = studyEngine.currentExpectedUci(); // –ø–µ—Ä–≤—ã–π —Ö–æ–¥ —É—á–µ–Ω–∏–∫–∞
    const dests = expectedUci
      ? new Map([[expectedUci.slice(0, 2), [expectedUci.slice(2, 4)]]])
      : new Map();

    // –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–æ–Ω–æ–∫: —Å–Ω–∞—á–∞–ª–∞ fen, –∑–∞—Ç–µ–º dests –∏ —Å—Ç—Ä–µ–ª–∫–∞
    if (boardApiRef.current) {
      boardApiRef.current.setFen(fen);
      boardApiRef.current.setAllowedMoves(dests);
      boardApiRef.current.showArrow(expectedUci ?? null);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    didInitialSyncRef.current = false;

    // –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–µ–ª—ë–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    showUiMsg({ kind: "success", text: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!", ttlMs: 900 });
  }, [debut.id, showUiMsg]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–µ–±—é—Ç
    const currentDebut = studyEngine.getState().currentDebut;
    if (currentDebut?.id === debut.id) {
      console.log('StudyEngine: Debut already loaded, skipping start');
      return;
    }

    console.log('StudyEngine: Starting new debut:', debut.id);
    studyEngine.setStateChangeCallback(() => setState(studyEngine.getState()));
    studyEngine.start(debut);
    
    return () => {
      studyEngine.setStateChangeCallback(() => {});
    };
  }, [debut.id]); // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞ debut.id –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ debut

  // Debug: –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('useStudyEngine: State changed:', {
      mode: state.mode,
      studentIndex: state.studentIndex,
      currentFen: state.currentFen,
      currentBranch: state.currentBranch?.id,
      learningMode: state.learningMode,
      currentComment: state.currentComment
    });
  }, [state]);

  // –ù–û–í–´–ô: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ API –¥–æ—Å–∫–∏
  const setBoardApi = useCallback((api: ChessBoardApi) => {
    boardApiRef.current = api;
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ—Ä–¥–∞ —Å –¥–≤–∏–∂–∫–æ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    // —É—Å–ª–æ–≤–∏—è: –µ—Å—Ç—å –±–æ—Ä–¥, –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞/–¥–µ–±—é—Ç, –∏ –º—ã –µ—â—ë –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
    if (!boardApiRef.current) return;
    if (!state.currentBranch) return;
    if (didInitialSyncRef.current) return;

    didInitialSyncRef.current = true;

    // 1) –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π FEN –∏–∑ –¥–≤–∏–∂–∫–∞ (–æ–Ω —É–∂–µ set'–Ω—É—Ç –≤ start())
    boardApiRef.current.setFen(studyEngine.getCurrentFen());

    // 2) –ø—Ä–µ—Ä–æ–ª–ª–∏–º –¥–æ –æ—á–µ—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–∞ (–¥–ª—è —á—ë—Ä–Ω—ã—Ö —ç—Ç–æ –±–µ–ª—ã–µ —Ö–æ–¥—ã),
    //    –∫–∞–∂–¥—ã–π –ø–æ–ª—É—Ö–æ–¥ –æ—Ç—Ä–∏—Å—É–µ–º –Ω–∞ –±–æ—Ä–¥–µ –ü–û FEN –ò–°–¢–ò–ù–´
    const autos = studyEngine.prerollToStudentTurn();
    for (const u of autos) {
      boardApiRef.current.playUci(u, studyEngine.getCurrentFen());
    }

    // 3) —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ö–æ–¥
    updateArrowAndDests();
  }, [boardApiRef.current, state.currentBranch?.id]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–µ–±—é—Ç–∞/–≤–µ—Ç–∫–∏
  useEffect(() => {
    didInitialSyncRef.current = false;
  }, [debut.id, state.currentBranch?.id]);

  // –ù–û–í–´–ô: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏ dests –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    updateArrowAndDests();
  }, [state.studentIndex, state.mode]);

  const onMove = useCallback(async (uci: string): Promise<boolean> => {
    console.log('useStudyEngine: onMove called with UCI:', uci);
    
    const result: ApplyResult = studyEngine.applyUserMove(uci);
    console.log('useStudyEngine: onMove result:', result);
    
    if (!result.accepted) {
      // –•–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      console.log('useStudyEngine: Move rejected:', result.errorMessage);
      return false; // –¥–æ—Å–∫–∞ –æ—Ç–∫–∞—Ç–∏—Ç —Ö–æ–¥
    }
    
    // –µ—Å–ª–∏ –±—ã–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚Äî –¥–≤–∏–≥–∞–µ–º –¥–æ—Å–∫—É —Å FEN —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
    if (result.opponentUci && boardApiRef.current) {
      await boardApiRef.current.playUci(result.opponentUci, studyEngine.getCurrentFen());
    }

    // —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ö–æ–¥—ã
    updateArrowAndDests();

    // –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    showUiMsg(result.uiMessage);

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    if (result.modeTransition === "GUIDED_TO_TEST") {
      console.log('useStudyEngine: Transitioning to TEST mode');
      // –ª—ë–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX
      setTimeout(updateArrowAndDests, 50);
    } else if (result.modeTransition === "COMPLETED") {
      await handleBranchCompletedAndMaybeGoNext();
    }
    
    return true; // –¥–æ—Å–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç —Ö–æ–¥
  }, [state.currentBranch]);

  // –ù–û–í–´–ô: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π
  const handleBranchCompletedAndMaybeGoNext = useCallback(async () => {
    const nextId = studyEngine.getNextBranchId();

    if (!nextId) {
      showUiMsg({ kind: "success", text: "–í—Å–µ –≤–µ—Ç–∫–∏ –¥–µ–±—é—Ç–∞ –∏–∑—É—á–µ–Ω—ã. üëç", ttlMs: 1200 });
      return;
    }

    await studyEngine.loadBranchById(nextId);
    studyEngine.resetToStart("GUIDED");

    // –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –±–µ–ª—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ —á—ë—Ä–Ω—ã—Ö ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—Å—è¬ª –≤–Ω—É—Ç—Ä–∏ resetToStart
    // —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –∏ —Å—Ç—Ä–µ–ª–∫—É
    boardApiRef.current?.setFen(studyEngine.getCurrentFen());
    updateArrowAndDests();
  }, []);

  const onNextBranch = useCallback(async () => {
    const nextId = studyEngine.getNextBranchId();
    if (!nextId) return; // –≤—Å—ë –ø—Ä–æ–π–¥–µ–Ω–æ
    
    await studyEngine.loadBranchById(nextId);
    // –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –≤ —Ä–µ–∂–∏–º–µ GUIDED
    studyEngine.setMode("GUIDED");
    await updateArrowAndDests();
  }, []);

  const onRestart = useCallback(() => {
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    console.log('useStudyEngine: onRestart called');
  }, []);

  // Get current branch info
  const currentBranch = state.currentBranch;
  const studentIndex = state.studentIndex; // –ù–û–í–´–ô: –∏—Å–ø–æ–ª—å–∑—É–µ–º studentIndex –≤–º–µ—Å—Ç–æ currentStepIndex
  const mode = state.mode;
  const errors = state.errors;
  const expectedUci = studyEngine.currentExpectedUci();
  const allowedMoves = studyEngine.getAllowedMoves();
  const currentExpectedMove = studyEngine.getCurrentExpectedMove();

  // Debug: –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ö–æ–¥—ã
  console.log('useStudyEngine: allowedMoves:', allowedMoves);
  console.log('useStudyEngine: currentExpectedMove:', currentExpectedMove);

  // Calculate progress
  const progress = currentBranch 
    ? progressManager.getOverallProgress(debut.id, debut.branches.length)
    : 0;

  return {
    currentBranch,
    studentIndex, // –ù–û–í–´–ô: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º studentIndex
    currentFen: state.currentFen, // –ù–û–í–´–ô: –¥–æ–±–∞–≤–ª—è–µ–º currentFen
    mode,
    errors,
    expectedUci,
    progress,
    learningMode: state.learningMode,
    currentComment: state.currentComment,
    showHint: state.showHint,
    allowedMoves,
    currentExpectedMove,
    onMove,
    onNextBranch,
    onRestart,
    setBoardApi, // –ù–û–í–´–ô: –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ API –¥–æ—Å–∫–∏
    updateArrowAndDests, // –ù–û–í–´–ô: –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –∏ dests
    uiMsg, // –ù–û–í–´–ô: –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    resetCurrentDebut // –ù–û–í–´–ô: –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–±—é—Ç–∞
  };
}
